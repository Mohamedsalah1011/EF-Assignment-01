// <auto-generated />
using System;
using EF_Assignment_01.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Assignment_01.Migrations
{
    [DbContext(typeof(ItiContext))]
    [Migration("20250928214920_AddRelationsAndLazyLoading")]
    partial class AddRelationsAndLazyLoading
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Assignment_01.Model.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TopId")
                        .HasColumnType("int")
                        .HasColumnName("Top_ID");

                    b.Property<int>("Top_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Top_ID");

                    b.ToTable("Courses", t =>
                        {
                            t.Property("Top_ID")
                                .HasColumnName("Top_ID1");
                        });
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Course_Inst", b =>
                {
                    b.Property<int>("inst_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("Course_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("evaluate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("inst_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Course_Insts");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsId")
                        .HasColumnType("int")
                        .HasColumnName("Ins_ID");

                    b.Property<int>("Ins_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("InsId");

                    b.ToTable("Departments", t =>
                        {
                            t.Property("Ins_ID")
                                .HasColumnName("Ins_ID1");
                        });
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Bouns")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("Dept_ID");

                    b.Property<int>("Dept_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("HourRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DeptId");

                    b.ToTable("Instructors", t =>
                        {
                            t.Property("Dept_ID")
                                .HasColumnName("Dept_ID1");
                        });
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Stud_Course", b =>
                {
                    b.Property<int>("stud_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("Course_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("stud_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Stud_Courses");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepId")
                        .HasColumnType("int")
                        .HasColumnName("Dep_Id");

                    b.Property<int>("Dep_Id")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("Dep_Id");

                    b.ToTable("Students", t =>
                        {
                            t.Property("Dep_Id")
                                .HasColumnName("Dep_Id1");
                        });
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Topic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Course", b =>
                {
                    b.HasOne("EF_Assignment_01.Model.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("Top_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Course_Inst", b =>
                {
                    b.HasOne("EF_Assignment_01.Model.Course", "Course")
                        .WithMany("CourseInsts")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Assignment_01.Model.Instructor", "Instructor")
                        .WithMany("CourseInsts")
                        .HasForeignKey("inst_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Department", b =>
                {
                    b.HasOne("EF_Assignment_01.Model.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Instructor", b =>
                {
                    b.HasOne("EF_Assignment_01.Model.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Stud_Course", b =>
                {
                    b.HasOne("EF_Assignment_01.Model.Course", "Course")
                        .WithMany("StudCourses")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Assignment_01.Model.Student", "Student")
                        .WithMany("StudCourses")
                        .HasForeignKey("stud_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Student", b =>
                {
                    b.HasOne("EF_Assignment_01.Model.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("Dep_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Course", b =>
                {
                    b.Navigation("CourseInsts");

                    b.Navigation("StudCourses");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Instructor", b =>
                {
                    b.Navigation("CourseInsts");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Student", b =>
                {
                    b.Navigation("StudCourses");
                });

            modelBuilder.Entity("EF_Assignment_01.Model.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
